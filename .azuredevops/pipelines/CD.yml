# The following variables should be set in the pipeline
# AZURE_SERVICE_CONNECTION
# ACR_SERVICE_CONNECTION

trigger: none

name: 'Deploy Application'
pool:
  vmImage: 'ubuntu-latest'

parameters:
  - name: environmentName
    type: string
    displayName: Environment Name
    default: mcnet7dapracasample
  
  - name: location
    type: string
    displayName: Azure Region
    default: eastus

variables:
  - name: imageRepository
    value: samples

stages:
  - stage: ProvisionAzure
    displayName: Provision Azure resources
    jobs:
      # - job: DeployBicepJob
      #   displayName: Deploy Bicep file
      #   steps:
      #     - task: AzureCLI@2
      #       name: BicepDeploy
      #       displayName: Azure CLI deployment
      #       inputs:
      #         azureSubscription: $(AZURE_SERVICE_CONNECTION)
      #         scriptType: bash
      #         scriptLocation: inlineScript
      #         inlineScript: |
      #           outputs=$(az deployment sub create \
      #             --location ${{ parameters.location }} \
      #             --template-file ./infra/main.bicep \
      #             --parameters \
      #                 name=${{ parameters.environmentName }} \
      #                 location=$(location))

      #           echo "Capturing outputs . . ."
      #           echo $outputs | jq -c '.properties.outputs | to_entries[] | [.key, .value.value]' |
      #             while IFS=$"\n" read -r c; do
      #               outputname=$(echo "$c" | jq -r '.[0]')
      #               outputvalue=$(echo "$c" | jq -r '.[1]')
      #               echo "##vso[task.setvariable variable=$outputname;isOutput=true]$outputvalue"
      #             done
      - job: BuildDotNet
        displayName: Build .NET App
        # dependsOn: DeployBicepJob
        # variables:
        #     acrLoginServer: $[ dependencies.DeployBicepJob.outputs['BicepDeploy.azurE_CONTAINER_REGISTRY_ENDPOINT'] ]
        steps:
          - task: UseDotNet@2
            displayName: 'Use .NET'
            inputs:
              version: 7.x
          - task: DotNetCoreCLI@2
            name: Build
            inputs:
              command: 'build'
              projects: ./source
              arguments: '--configuration Release'
          # - task: DockerInstaller@0
          #   inputs:
          #     dockerVersion: '17.09.0-ce'
          - task: DotNetCoreCLI@2
            name: Publish
            inputs:
              command: 'publish'
              arguments: '--os linux --arch x64 -p:PublishProfile=DefaultContainer'
              projects: ./source
          # - task: Docker@2
          #   name: DockerLogin
          #   displayName: ACR Login
          #   inputs:
          #     containerRegistry: $(ACR_SERVICE_CONNECTION)
          #     command: login
          # - task: Docker@2
          #   name: DockerTag
          #   displayName: Tag container for ACR
          #   inputs:
          #     command: 
          - task: Docker@2
            name: DockerPush  
            displayName: Push container to ACR
            inputs:
              command: push
              repository: $(imageRepository)
              containerRegistry: $(ACR_SERVICE_CONNECTION)
              tags: |
                'latest'

      # - job: PublishApp
      #   displayName: Publish container app
      #   dependsOn: DeployBicepJob
      #   variables:
      #       acrLoginServer: $[ dependencies.DeployBicepJob.outputs['BicepDeploy.azurE_CONTAINER_REGISTRY_ENDPOINT'] ]
      #   steps:
      #     - task: Bash@3
      #       inputs:
      #         targetType: inline
      #         script: echo $(acrLoginServer)




          # - task: PublishPipelineArtifact@1
          #   displayName: Publish Artifact
          #   inputs:
          #     targetPath: "$(Build.ArtifactStagingDirectory)/bicep"
          #     artifact: bicep
# See https://github.com/Azure/bicep/issues/4638#issuecomment-932214561

  # - stage: ContainerizeApp
  #   displayName: Containerize .NET Application
  #   jobs:
  #     - job: BuildDotNet
  #       displayName: Build .NET App
  #       steps:
  #         - task: UseDotNet@2
  #           displayName: 'Use .NET'
  #           inputs:
  #             version: 7.x
  #         - task: DotNetCoreCLI@2
  #           name: Build
  #           inputs:
  #             command: 'build'
  #             projects: ./source
  #             arguments: '--configuration Release'